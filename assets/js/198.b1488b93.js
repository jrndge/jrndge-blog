(window.webpackJsonp=window.webpackJsonp||[]).push([[198],{562:function(e,r,t){"use strict";t.r(r);var n=t(7),s=Object(n.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"同一个域名不同的子域名-解析到同一个ip服务器-服务器为centos-安装了docker服务-其中有一个青龙服务-另外有一个gotify服务-现在需要创建一个docker的nginx服务-实现的效果为青龙的域名不加任何端口号-直接访问到青龙服务-gotify的域名不加任何端口直接访问到gotify的服务-具体实现步骤如下"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#同一个域名不同的子域名-解析到同一个ip服务器-服务器为centos-安装了docker服务-其中有一个青龙服务-另外有一个gotify服务-现在需要创建一个docker的nginx服务-实现的效果为青龙的域名不加任何端口号-直接访问到青龙服务-gotify的域名不加任何端口直接访问到gotify的服务-具体实现步骤如下"}},[e._v("#")]),e._v(" 同一个域名不同的子域名.解析到同一个ip服务器,服务器为centos.安装了docker服务,其中有一个青龙服务,另外有一个gotify服务,现在需要创建一个docker的Nginx服务.实现的效果为青龙的域名不加任何端口号,直接访问到青龙服务.gotify的域名不加任何端口直接访问到gotify的服务.具体实现步骤如下")]),e._v(" "),r("h3",{attrs:{id:"_1-拉取-nginx-镜像"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-拉取-nginx-镜像"}},[e._v("#")]),e._v(" 1. 拉取 Nginx 镜像")]),e._v(" "),r("p",[r("code",[e._v("docker pull nginx:latest")])]),e._v(" "),r("h3",{attrs:{id:"_2-创建-nginx-配置文件目录"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建-nginx-配置文件目录"}},[e._v("#")]),e._v(" 2. 创建 Nginx 配置文件目录")]),e._v(" "),r("p",[r("code",[e._v("mkdir -p /root/nginx/conf.d")])]),e._v(" "),r("h3",{attrs:{id:"_3-创建两个域名的配置文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建两个域名的配置文件"}},[e._v("#")]),e._v(" 3. 创建两个域名的配置文件")]),e._v(" "),r("p",[e._v("为青龙项目创建配置文件：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("cat > /root/nginx/conf.d/qinglong.conf << 'EOF'\nserver {\n    listen 80;\n    server_name qinglong.cqzhz.com;\n\n    location / {\n        proxy_pass http://1.94.235.68:5885;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # 添加子目录配置\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n        \n        # WebSocket 支持\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n\n    # 专门处理静态资源\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)$ {\n        proxy_pass http://1.94.235.68:5885;\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n        expires 7d;\n        proxy_cache_valid 200 7d;\n        proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;\n    }\n}\nEOF\n")])])]),r("p",[e._v("为 Gotify 项目创建配置文件：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("cat > /root/nginx/conf.d/gotify.conf << 'EOF'\nserver {\n    listen 80;\n    server_name gotify.cqzhz.com;\n\n    location / {\n        proxy_pass http://1.94.235.68:8358;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket 支持\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\nEOF\n")])])]),r("h3",{attrs:{id:"_4-启动-nginx-容器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-启动-nginx-容器"}},[e._v("#")]),e._v(" 4. 启动 Nginx 容器")]),e._v(" "),r("p",[r("code",[e._v("docker run -d \\ --name nginx-proxy \\ --restart always \\ -p 80:80 \\ -v /root/nginx/conf.d:/etc/nginx/conf.d \\ nginx:latest")])]),e._v(" "),r("h2",{attrs:{id:"替我的每个域名都申请ssl证书并添加自动续签"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#替我的每个域名都申请ssl证书并添加自动续签"}},[e._v("#")]),e._v(" 替我的每个域名都申请ssl证书并添加自动续签")]),e._v(" "),r("h3",{attrs:{id:"_1-安装-certbot"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-安装-certbot"}},[e._v("#")]),e._v(" 1. 安装 certbot")]),e._v(" "),r("p",[r("em",[e._v("# 安装 EPEL 源")])]),e._v(" "),r("p",[r("code",[e._v("yum install epel-release -y")])]),e._v(" "),r("p",[r("em",[e._v("# 安装 certbot")])]),e._v(" "),r("p",[r("code",[e._v("yum install certbot python3-certbot-nginx -y")])]),e._v(" "),r("h3",{attrs:{id:"_2-停止-nginx-容器-申请证书时需要使用-80-端口"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-停止-nginx-容器-申请证书时需要使用-80-端口"}},[e._v("#")]),e._v(" 2. 停止 Nginx 容器（申请证书时需要使用 80 端口）")]),e._v(" "),r("p",[r("code",[e._v("docker stop nginx-proxy")])]),e._v(" "),r("h3",{attrs:{id:"_3-申请-ssl-证书"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-申请-ssl-证书"}},[e._v("#")]),e._v(" 3. 申请 SSL 证书")]),e._v(" "),r("p",[e._v("`certbot certonly --standalone \\")]),e._v(" "),r("p",[e._v("-d qinglong.cqzhz.com \\")]),e._v(" "),r("p",[e._v("-d gotify.cqzhz.com \\")]),e._v(" "),r("p",[e._v("--agree-tos \\")]),e._v(" "),r("p",[e._v("--email your-email@example.com  "),r("em",[e._v("# 请替换为你的邮箱")]),e._v("`")]),e._v(" "),r("h3",{attrs:{id:"_4-修改-nginx-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-修改-nginx-配置"}},[e._v("#")]),e._v(" 4. 修改 Nginx 配置")]),e._v(" "),r("p",[e._v("青龙项目配置：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('server {\n    listen 80;\n    server_name qinglong.cqzhz.com;\n    # 将 HTTP 重定向到 HTTPS\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl;\n    server_name qinglong.cqzhz.com;\n\n    # SSL 证书配置\n    ssl_certificate /etc/letsencrypt/live/qinglong.cqzhz.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/qinglong.cqzhz.com/privkey.pem;\n    ssl_session_timeout 1d;\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_tickets off;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    location / {\n        proxy_pass http://1.94.235.68:5885;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection "upgrade";\n    }\n}\n')])])]),r("p",[e._v("Gotify 项目配置：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('server {\n    listen 80;\n    server_name gotify.cqzhz.com;\n    # 将 HTTP 重定向到 HTTPS\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl;\n    server_name gotify.cqzhz.com;\n\n    # SSL 证书配置\n    ssl_certificate /etc/letsencrypt/live/gotify.cqzhz.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/gotify.cqzhz.com/privkey.pem;\n    ssl_session_timeout 1d;\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_tickets off;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    location / {\n        proxy_pass http://1.94.235.68:8358;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection "upgrade";\n    }\n}\n')])])]),r("h3",{attrs:{id:"_5-重新启动项目"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-重新启动项目"}},[e._v("#")]),e._v(" 5.重新启动项目")]),e._v(" "),r("p",[r("em",[e._v("# 停止旧容器")])]),e._v(" "),r("p",[r("code",[e._v("docker stop nginx-proxy")])]),e._v(" "),r("p",[r("em",[e._v("# 删除旧容器")])]),e._v(" "),r("p",[r("code",[e._v("docker rm nginx-proxy")])]),e._v(" "),r("p",[r("em",[e._v("# 现在重新运行新容器")])]),e._v(" "),r("p",[e._v("`docker run -d \\")]),e._v(" "),r("p",[e._v("--name nginx-proxy \\")]),e._v(" "),r("p",[e._v("--restart always \\")]),e._v(" "),r("p",[e._v("-p 80:80 \\")]),e._v(" "),r("p",[e._v("-p 443:443 \\")]),e._v(" "),r("p",[e._v("-v /root/nginx/conf.d:/etc/nginx/conf.d \\")]),e._v(" "),r("p",[e._v("-v /etc/letsencrypt:/etc/letsencrypt:ro \\")]),e._v(" "),r("p",[e._v("nginx:latest`")]),e._v(" "),r("p",[e._v("现在就能正常使用https访问两个项目了")]),e._v(" "),r("h2",{attrs:{id:"为我的项目添加自动续签功能"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为我的项目添加自动续签功能"}},[e._v("#")]),e._v(" 为我的项目添加自动续签功能")]),e._v(" "),r("p",[r("em",[e._v("# 创建续期脚本")])]),e._v(" "),r("p",[e._v("`cat > /root/renew-cert.sh << 'EOF'")]),e._v(" "),r("p",[e._v("#!/bin/bash")]),e._v(" "),r("p",[e._v("docker stop nginx-proxy")]),e._v(" "),r("p",[e._v("certbot renew")]),e._v(" "),r("p",[e._v("docker start nginx-proxy")]),e._v(" "),r("p",[e._v("EOF`")]),e._v(" "),r("p",[r("em",[e._v("# 添加执行权限")])]),e._v(" "),r("p",[r("code",[e._v("chmod +x /root/renew-cert.sh")])]),e._v(" "),r("p",[r("em",[e._v("# 添加定时任务，每月 1 日凌晨 2 点续期")])]),e._v(" "),r("p",[r("code",[e._v('(crontab -l 2>/dev/null; echo "0 2 1 * * /root/renew-cert.sh") | crontab -')])])])}),[],!1,null,null,null);r.default=s.exports}}]);